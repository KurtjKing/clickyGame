{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Score/Score.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","name","src","image","id","onClick","shuffleScoreCard","Wrapper","children","Score","total","status","App","state","chars","clickedChars","score","topScore","message","_this","includes","setState","push","length","console","log","i","j","Math","floor","random","_ref","_this2","this","components_Score_Score","components_Wrapper_Wrapper","map","data","components_Card_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ywqDAUeA,SAPF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOC,GAAIT,EAAMS,KAClDR,EAAAC,EAAAC,cAAA,QAAMO,QAAS,kBAAMV,EAAMW,iBAAiBX,EAAMS,KAAKL,UAAU,UAAjE,eCDWQ,SAFC,SAAAZ,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,YCW1CC,SARD,SAAAd,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,aAAiCJ,EAAMe,OACvCd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,aAAoCJ,EAAMe,OAC1Cd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAUJ,EAAMgB,WCqEnBC,oNArEbC,MAAQ,CACNC,QACAC,aAAc,GACdC,MAAO,EACPC,SAAU,EACVC,QAAS,MAGXZ,iBAAmB,SAAAF,GACjB,IAAIW,EAAeI,EAAKN,MAAME,aAE9B,GAAIA,EAAaK,SAAShB,GACxBe,EAAKE,SAAS,CAAEN,aAAc,GAAIC,MAAO,EAAGL,OAAQ,mBADtD,CAME,GAFAI,EAAaO,KAAKlB,GAEU,IAAxBW,EAAaQ,OAGf,OAFAJ,EAAKE,SAAS,CAAEL,MAAO,EAAGL,OAAQ,uBAAwBI,aAAc,UACxES,QAAQC,IAAI,WAIdN,EAAKE,SAAS,CAAEP,QAAOC,eAAcC,MAAOD,EAAaQ,OAAQL,QAAS,MAE1E,IAAK,IAAIQ,EAAIZ,EAAMS,OAAS,EAAGG,EAAI,EAAGA,IAAK,CACzC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADCK,EAElB,CAACjB,EAAMa,GAAIb,EAAMY,IAAvCZ,EAAMY,GAFkCK,EAAA,GAE9BjB,EAAMa,GAFwBI,EAAA,8EAetC,IAAAC,EAAAC,KACP,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,eACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,2CAIFH,EAAAC,EAAAC,cAACoC,EAAD,CAAOxB,MAAOuB,KAAKpB,MAAMG,MACvBC,SAAUgB,KAAKpB,MAAMI,SACrBN,OAAQsB,KAAKpB,MAAMF,SAErBf,EAAAC,EAAAC,cAACqC,EAAD,KACGF,KAAKpB,MAAMC,MAAMsB,IAAI,SAAAC,GAAI,OACxBzC,EAAAC,EAAAC,cAACwC,EAAD,CACEhC,iBAAkB0B,EAAK1B,iBACvBF,GAAIiC,EAAKjC,GACTmC,IAAKF,EAAKjC,GACVD,MAAOkC,EAAKlC,mBA7DRqC,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.02181104.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = props => (\n  <div className=\"card img-container hover\">\n    <img alt={props.name} src={props.image} id={props.id} />\n    <span onClick={() => props.shuffleScoreCard(props.id)} className=\"remove\">X</span>\n  </div>\n);\n\nexport default Card;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","\nimport React from \"react\";\nimport \"./Score.css\";\n\n\n//stateless component\nconst Score = props => (\n  <div className=\"gameScore\">\n    <h3 className=\"score\">Your Score{props.total}</h3>\n    <h3 className=\"topScore\">Top Score:{props.total}</h3>\n    <h3 className=\"status\">{props.status}</h3>\n  </div>\n);\n\nexport default Score;","import React, { Component } from 'react';\nimport Card from \"./components/Card\";\nimport chars from \"./cards.json\";\nimport Wrapper from \"./components/Wrapper\";\nimport Score from \"./components/Score\";\nimport './App.css';\n\n\nclass App extends Component {\n  // Setting this.state.chars to the cards json array\n  state = {\n    chars,\n    clickedChars: [],\n    score: 0,\n    topScore: 0,\n    message: \"\"\n\n  };\n  shuffleScoreCard = id => {\n    let clickedChars = this.state.clickedChars;\n\n    if (clickedChars.includes(id)) {\n      this.setState({ clickedChars: [], score: 0, status: \"Game Over!\" });\n      return;\n    } else {\n      clickedChars.push(id)\n\n      if (clickedChars.length === 9) {\n        this.setState({ score: 9, status: \"Winner,Winner,Winner\", clickedChars: [] });\n        console.log('You Win');\n        return;\n      }\n\n      this.setState({ chars, clickedChars, score: clickedChars.length, message: \" \" });\n\n      for (let i = chars.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [chars[i], chars[j]] = [chars[j], chars[i]];\n      }\n    }\n  }   \n  \n  // I wanted to use this method. I could get the score to go up but i couldnt figure out the loop and conditonals//\n  //   shuffleScoreCard = id => {\n\n  //     chars.sort(() => Math.random() - 0.5);\n\n  //     this.setState({ chars, score:   this.state.score +1 });\n  // };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Car Clicker</h1>\n          <p className=\"App-intro\">\n            Try not to click the same image twice!\n        </p>\n        </header>\n        <Score total={this.state.score}\n          topScore={this.state.topScore}\n          status={this.state.status}\n        />\n        <Wrapper>\n          {this.state.chars.map(data => (\n            <Card\n              shuffleScoreCard={this.shuffleScoreCard}\n              id={data.id}\n              key={data.id}\n              image={data.image}\n            />\n          ))}\n        </Wrapper>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}